В операционных системах семейства Unix пути к файлам имеют следующий вид: /folder1/folder2/another_folder/filename.ext. Они начинаются с символа «/» (слэш), затем идут имена вложенных папок, разделённые этим же символом. Например, в нашем примере папка another_folder вложена в папку folder2, которая, в свою очередь, вложена в папку folder1. В конце, после последнего слэша, идёт имя файла и расширение («filename.ext»), разделённые точкой.
Вам поручено написать систему распределения доступа к файлам. Она должна не пускать пользователя к тем файлам, прочитать которые у него не хватает прав.
Права пользователю можно выдавать как на отдельный файл, так и на целую папку. Например, можно разрешить читать только файл /folder1/folder2/another_folder/filename.ext, а можно разрешить читать всю папку /folder1/folder2/ и тогда пользователь сможет автоматически прочитать любой файл в этой папке, в любой её подпапке и так далее.
Вашей программе выдан список разрешений и запросов. Для каждого запроса скажите, имеет ли право пользователь читать этот файл. Пользователь имеет право читать файл, если ему явно разрешили читать именно этот файл, или если ему разрешили читать любую из папок, в которых находится этот файл. В примере выше пользователь может читать файл filename.ext, если ему разрешили читать его или если ему разрешили читать одну из папок /folder1, /folder1/folder2, /folder1/folder2/another_folder.
Формат ввода
В первой строчке дано целое число N (1 ≤ N ≤ 1000) — количество выданных разрешений. В следующих N строчках записаны пути, которые пользователю разрешено читать. Путь может содержать только латинские буквы (заглавные и строчные), символ подчёркивания (_), точку и слэш. Гарантируется, что подпапка и файл в одной папке не могут иметь одинаковое название.
В следующей строчке дано целое число M (1 ≤ M ≤ 1000) — количество запросов. В следующих M строчках записаны пути, для которых запрашивается доступ пользователя.
Формат вывода
Для каждого запроса выведите в отдельной строке «YES» или «NO» (без кавычек). Выведите «YES», если пользователь сможет прочитать этот файл (то есть ему был выдан доступ к файлу или к одной из его родительских папок), и «NO», если не сможет.
